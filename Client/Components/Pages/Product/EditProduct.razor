@page "/product/edit/{productId:int}"
@rendermode InteractiveServer

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Edit Product @productId</h3>

@if (loadError)
{
    <p class="text-danger">Unable to load the product details.</p>
}
else if (saveError)
{
    <p class="text-danger">Unable to save changes. Please try again.</p>
}
else if (product == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="productCode">Product Code</label>
            <InputText id="productCode" class="form-control" @bind-Value="product.ProductCode" />
            <ValidationMessage For="@(() => product.ProductCode)" />
        </div>

        <div class="form-group">
            <label for="productName">Product Name</label>
            <InputText id="productName" class="form-control" @bind-Value="product.ProductName" />
            <ValidationMessage For="@(() => product.ProductName)" />
        </div>

        <div class="form-group">
            <label for="unitPrice">Unit Price</label>
            <InputNumber id="unitPrice" class="form-control" @bind-Value="product.UnitPrice" />
            <ValidationMessage For="@(() => product.UnitPrice)" />
        </div>

        <div style="margin-top: 10px">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <a class="btn btn-secondary" href="/product">Cancel</a>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int productId { get; set; }
    private ProductInputUiModel? product;
    private bool loadError;
    private bool saveError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync($"api/products/{productId}");

            if (response.IsSuccessStatusCode)
            {
                product = await response.Content.ReadFromJsonAsync<ProductInputUiModel>();
            }
            else
            {
                loadError = true;
            }
        }
        catch
        {
            loadError = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"api/products/{productId}", product);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/product");
            }
            else
            {
                saveError = true;
            }
        }
        catch
        {
            saveError = true;
        }
    }
}
