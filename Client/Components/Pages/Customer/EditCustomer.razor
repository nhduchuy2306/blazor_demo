@page "/customer/edit/{customerId:int}"
@rendermode InteractiveServer

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Edit Customer @customerId</h3>

@if (loadError)
{
    <p class="text-danger">Unable to load customer details.</p>
}
else if (saveError)
{
    <p class="text-danger">Unable to save changes. Please try again.</p>
}
else if (customer == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="customer" OnValidSubmit="HandleValidSubmit" FormName="EditCustomer" Enhance>
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="customerCode">Customer Code</label>
            <InputText id="customerCode" class="form-control" @bind-Value="customer.CustomerCode" />
            <ValidationMessage For="@(() => customer.CustomerCode)" />
        </div>

        <div class="form-group">
            <label for="customerName">Customer Name</label>
            <InputText id="customerName" class="form-control" @bind-Value="customer.CustomerName" />
            <ValidationMessage For="@(() => customer.CustomerName)" />
        </div>

        <div class="form-group">
            <label for="contactInfo">Contact Info</label>
            <InputText id="contactInfo" class="form-control" @bind-Value="customer.ContactInfo" />
            <ValidationMessage For="@(() => customer.ContactInfo)" />
        </div>

        <div class="form-group">
            <label for="address">Address</label>
            <InputText id="address" class="form-control" @bind-Value="customer.Address" />
            <ValidationMessage For="@(() => customer.Address)" />
        </div>

        <div style="margin-top: 10px">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <a class="btn btn-secondary" href="/customer">Cancel</a>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int customerId { get; set; }
    private CustomerUiModel? customer;
    private bool loadError;
    private bool saveError;
    private bool forceLoad;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync($"api/customers/{customerId}");
            if (response.IsSuccessStatusCode)
            {
                customer = await response.Content.ReadFromJsonAsync<CustomerUiModel>();
            }
            else
            {
                loadError = true;
            }
        }
        catch
        {
            loadError = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await HttpClient.PutAsJsonAsync($"api/customers/{customerId}", customer);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/customer", true);
            }
            else
            {
                saveError = true;
            }
        }
        catch (NavigationException navEx)
        {
            saveError = true;
        }
    }
}
