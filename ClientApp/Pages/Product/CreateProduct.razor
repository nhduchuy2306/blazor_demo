@page "/product/create"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Create Product</h3>

@if (saveError)
{
    <p class="text-danger">Unable to save the product. Please try again.</p>
}
else if (getDataError)
{
    <p class="text-danger">Unable to get data. Please try again.</p>
}
else
{
    <EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit" FormName="product">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="productCode">Product Code</label>
            <InputText id="productCode" class="form-control" @bind-Value="newProduct.ProductCode" />
            <ValidationMessage For="@(() => newProduct.ProductCode)" />
        </div>

        <div class="form-group">
            <label for="productName">Product Name</label>
            <InputText id="productName" class="form-control" @bind-Value="newProduct.ProductName" />
            <ValidationMessage For="@(() => newProduct.ProductName)" />
        </div>

        <div class="form-group">
            <label for="unitPrice">Unit Price</label>
            <InputNumber id="unitPrice" class="form-control" @bind-Value="newProduct.UnitPrice" />
            <ValidationMessage For="@(() => newProduct.UnitPrice)" />
        </div>

        @if (warehouseProducts != null)
        {
            <div class="form-group">
                <label for="unitPrice">Warehouse</label>
                <InputSelect id="warehouseId" class="form-control" @bind-Value="newProduct.WarehouseId">
                    @foreach (var warehouse in warehouseProducts)
                    {
                        <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newProduct.WarehouseId)" />
            </div>

            <div class="form-group">
                <label for="unitPrice">Quantity</label>
                <InputNumber id="quantity" class="form-control" @bind-Value="newProduct.StockQuantity" />
                <ValidationMessage For="@(() => newProduct.StockQuantity)" />
            </div>
        }

        <div style="margin-top: 10px">
            <button type="submit" class="btn btn-primary">Save</button>
            <a class="btn btn-secondary" href="/product">Cancel</a>
        </div>
    </EditForm>
}

@code {
    private ProductInputUiModel newProduct = new ProductInputUiModel();
    private IEnumerable<WarehouseUiModel>? warehouseProducts;
    private bool saveError;
    private bool getDataError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var productRequest = await HttpClient.GetAsync("api/warehouses");
            var warehouseRequest = await HttpClient.GetAsync("api/warehouses");

            if (productRequest.IsSuccessStatusCode)
            {
                warehouseProducts = await productRequest.Content.ReadFromJsonAsync<IEnumerable<WarehouseUiModel>>();
            }

            if (warehouseRequest.IsSuccessStatusCode)
            {
                warehouseProducts = await warehouseRequest.Content.ReadFromJsonAsync<IEnumerable<WarehouseUiModel>>();
            }

            if(!warehouseRequest.IsSuccessStatusCode || !productRequest.IsSuccessStatusCode)
            {
                getDataError = true;
            }
        }
        catch
        {
            saveError = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/products", newProduct);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/product");
            }
            else
            {
                saveError = true;
            }
        }
        catch
        {
            saveError = true;
        }
    }
}
