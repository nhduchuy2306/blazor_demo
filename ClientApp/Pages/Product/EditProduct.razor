@page "/product/edit/{productId:int}"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Edit Product @productId</h3>

@if (loadError)
{
    <p class="text-danger">Unable to load the product details.</p>
}
else if (saveError)
{
    <p class="text-danger">Unable to save changes. Please try again.</p>
}
else if (product == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <!-- Product Details Section -->
        <div class="form-group">
            <label for="productCode">Product Code</label>
            <InputText id="productCode" class="form-control" @bind-Value="product.ProductCode" />
            <ValidationMessage For="@(() => product.ProductCode)" />
        </div>

        <div class="form-group">
            <label for="productName">Product Name</label>
            <InputText id="productName" class="form-control" @bind-Value="product.ProductName" />
            <ValidationMessage For="@(() => product.ProductName)" />
        </div>

        <div class="form-group">
            <label for="unitPrice">Unit Price</label>
            <InputNumber id="unitPrice" class="form-control" @bind-Value="product.UnitPrice" />
            <ValidationMessage For="@(() => product.UnitPrice)" />
        </div>

        <!-- Warehouse Stock Section -->
        @if(warehouses is not null)
        {
            <h4>Warehouse Stock</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Warehouse ID</th>
                        <th>Warehouse Name</th>
                        <th>Stock Quantity</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var warehouse in warehouses)
                    {
                        <tr>
                            <td>@warehouse.WarehouseId</td>
                            <td>@warehouse.WarehouseName</td>
                            <td>
                                <InputNumber class="form-control" @bind-Value="warehouse.StockQuantity" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <div style="margin-top: 10px">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <a class="btn btn-secondary" href="/product">Cancel</a>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int productId { get; set; }
    private ProductUpdateUiModel? product;
    private IEnumerable<WarehouseProductUiModel>? warehouses;
    private bool loadError;
    private bool saveError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var productResponse = await HttpClient.GetAsync($"api/products/{productId}");
            var warehouseResponse = await HttpClient.GetAsync($"api/products/{productId}/warehouses");

            if (productResponse.IsSuccessStatusCode)
            {
                product = await productResponse.Content.ReadFromJsonAsync<ProductUpdateUiModel>();
            }

            if (warehouseResponse.IsSuccessStatusCode)
            {
                warehouses = await warehouseResponse.Content.ReadFromJsonAsync<IEnumerable<WarehouseProductUiModel>>();
            }

            if(!productResponse.IsSuccessStatusCode || !warehouseResponse.IsSuccessStatusCode)
            {
                loadError = true;
            }
        }
        catch
        {
            loadError = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var warehouseUiModels = new List<WarehouseUpdateUiModel>();
            if(warehouses is not null)
            {
                foreach (var warehouse in warehouses)
                {
                    warehouseUiModels.Add(new WarehouseUpdateUiModel
                    {
                        WarehouseId = warehouse.WarehouseId,
                        ProductId = productId,
                        StockQuantity = warehouse.StockQuantity
                    });
                }
            }

            product!.Warehouses = warehouseUiModels;
            var response = await HttpClient.PutAsJsonAsync($"api/products/{productId}", product);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/product");
            }
            else
            {
                saveError = true;
            }
        }
        catch
        {
            saveError = true;
        }
    }
}
