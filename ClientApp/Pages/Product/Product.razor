@page "/product"

@using ClientApp.Pages.Popup
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Product</h3>

@if (getDataError)
{
    <p>Unable to get data.</p>
}
else if (products is null)
{
    <div id="app">
        <svg class="loading-progress">
            <circle r="40%" cx="50%" cy="50%" />
            <circle r="40%" cx="50%" cy="50%" />
        </svg>
        <div class="loading-progress-text"></div>
    </div>
}
else
{
    <a class="btn btn-info" href="product/create">Create Product</a>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Product Id</th>
                <th scope="col">Product Code</th>
                <th scope="col">Product Name</th>
                <th scope="col">Unit Price</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>@product.ProductCode</td>
                    <td>@product.ProductName</td>
                    <td>@product.UnitPrice</td>
                    <td>
                        <a class="btn btn-primary" href="/product/edit/@product.ProductId">Edit</a>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(product.ProductId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Popup @ref="popup"
           Title="Delete Confirmation"
           OnConfirm="() => OnConfirmPopup(currentDeleteProductId)">
        @if (warehouseProducts != null && warehouseProducts.Count() > 0)
        {
            <p>This product is in warehouse. Can not delete</p>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Warehouse Id</th>
                        <th scope="col">Warehouse Name</th>
                        <th scope="col">Product Id</th>
                        <th scope="col">Product Name</th>
                        <th scope="col">Stock Quantity</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var warehouseProduct in warehouseProducts)
                    {
                        <tr>
                            <td>@warehouseProduct.WarehouseId</td>
                            <td>@warehouseProduct.WarehouseName</td>
                            <td>@warehouseProduct.ProductId</td>
                            <td>@warehouseProduct.ProductName</td>
                            <td>@warehouseProduct.StockQuantity</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Are you sure you want to delete this product?</p>
        }
    </Popup>
}

@code {
    private IEnumerable<ProductUiModel>? products;
    private IEnumerable<WarehouseProductUiModel>? warehouseProducts;
    private bool getDataError;
    private bool shouldRender;
    private int currentDeleteProductId;
    private Popup? popup;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = await HttpClient.GetAsync("api/products");
            if (request.IsSuccessStatusCode)
            {
                products = await request.Content.ReadFromJsonAsync<IEnumerable<ProductUiModel>>();
            }
            else
            {
                getDataError = true;
            }
            shouldRender = true;
        }
        catch (Exception)
        {
            getDataError = true;
        }
    }

    private void ConfirmDelete(int productId)
    {
        currentDeleteProductId = productId;

        var request = HttpClient.GetAsync($"api/products/{productId}/warehouses");

        if (request.Result.IsSuccessStatusCode)
        {
            warehouseProducts = request.Result.Content.ReadFromJsonAsync<IEnumerable<WarehouseProductUiModel>>().Result;
            if (warehouseProducts.Count() > 0)
            {
                popup.ShowConfirmButton = false;
            }
            else
            {
                popup.ShowConfirmButton = true;
            }
        }
        else
        {
            warehouseProducts = null;
            popup.ShowConfirmButton = true;
        }

        popup?.Show();
    }

    private async Task OnConfirmPopup(int productId)
    {
        await DeleteProduct(productId);
    }

    private async Task DeleteProduct(int productId)
    {
        var request = await HttpClient.DeleteAsync($"api/products/{productId}");
        if (request.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/product", true);
        }
        else
        {
            getDataError = true;
        }
    }
}
