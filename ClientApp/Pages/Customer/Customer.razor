@page "/customer"

@using ClientApp.Pages.Popup
@using System.Net.Http.Headers
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime

<h3>Customer</h3>

@if (getDataError)
{
    <p>Unable to get data.</p>
}
else if (customers is null)
{
    <div id="app">
        <svg class="loading-progress">
            <circle r="40%" cx="50%" cy="50%" />
            <circle r="40%" cx="50%" cy="50%" />
        </svg>
        <div class="loading-progress-text"></div>
    </div>
}
else
{
    <a class="btn btn-info" href="/customer/create">Create Customer</a>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Customer Id</th>
                <th scope="col">Customer Code</th>
                <th scope="col">Customer Name</th>
                <th scope="col">Contact Infor</th>
                <th scope="col">Address</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.CustomerId</td>
                    <td>@customer.CustomerCode</td>
                    <td>@customer.CustomerName</td>
                    <td>@customer.ContactInfo</td>
                    <td>@customer.Address</td>
                    <td>
                        <a class="btn btn-primary" href="/customer/edit/@customer.CustomerId">Edit</a>
                        <button class="btn btn-danger" disabled="@(loginCustomerId == customer.CustomerId)" @onclick="() => ConfirmDelete(customer.CustomerId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Popup @ref="popup"
           Title="Delete Confirmation"
           OnConfirm="() => OnConfirmPopup(currentDeleteCustomerId)">
        @if (salesInvoices != null && salesInvoices.Count() > 0)
        {
            <p>This customer have sales invoices. Can not delete</p>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Invoice Id</th>
                        <th scope="col">Customer Id</th>
                        <th scope="col">Customer Name</th>
                        <th scope="col">Invoice Number</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var sale in salesInvoices)
                    {
                        <tr>
                            <td>@sale.InvoiceId</td>
                            <td>@sale.CustomerId</td>
                            <td>@sale.CustomerName</td>
                            <td>@sale.InvoiceNumber</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Are you sure you want to delete this customer?</p>
        }
    </Popup>
}

@code {
    private IEnumerable<CustomerUiModel>? customers;
    private IEnumerable<SalesInvoiceUiModel>? salesInvoices;
    private bool getDataError;
    private int currentDeleteCustomerId;
    private int loginCustomerId;
    private Popup? popup;

    protected override async Task OnInitializedAsync()
    {
        var customerRequest = await HttpClient.GetAsync("api/customers");

        if (customerRequest.IsSuccessStatusCode)
        {
            customers = await customerRequest.Content.ReadFromJsonAsync<IEnumerable<CustomerUiModel>>();
        }
        else
        {
            getDataError = true;
        }

        var customerId = await IJSRuntime.InvokeAsync<string>("localStorage.getItem", "customerId");
        loginCustomerId = int.Parse(customerId);
    }

    private async Task ConfirmDelete(int customerId)
    {
        currentDeleteCustomerId = customerId;

        var salesInvoiceRequest = await HttpClient.GetAsync($"api/customers/{customerId}/saleinvoices");

        if (salesInvoiceRequest.IsSuccessStatusCode)
        {
            salesInvoices = salesInvoiceRequest.Content.ReadFromJsonAsync<IEnumerable<SalesInvoiceUiModel>>().Result;
            if(salesInvoices.Count() > 0)
            {
                popup.ShowConfirmButton = false;
            }
            else
            {
                salesInvoices = null;
                popup.ShowConfirmButton = true;
            }
        }
        else
        {
            salesInvoices = null;
            popup.ShowConfirmButton = true;
        }
        popup?.Show();
    }

    private async Task OnConfirmPopup(int customerId)
    {
        await DeleteCustomer(customerId);
    }

    private async Task DeleteCustomer(int customerId)
    {
        var token = await IJSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await HttpClient.DeleteAsync($"api/customers/{customerId}");

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/customer", true);
        }
        else
        {
            getDataError = true;
        }
    }
}
