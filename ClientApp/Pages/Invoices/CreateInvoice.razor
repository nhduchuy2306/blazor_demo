@page "/invoice/create"
@using System.Text.Json

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Create Sales Invoice</h3>

@if (customers is null || products is null)
{
    <p>Unable to get data.</p>
}
else
{
    if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color: red">@errorMessage</p>
    }
    <EditForm Model="invoice" OnValidSubmit="SubmitInvoice" FormName="CreateInvoice">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="customer">Select Customer</label>
            <InputSelect id="customer" class="form-control" @bind-Value="invoice.CustomerId">
                <option value="">--- Select Customer ---</option>
                @foreach (var customer in customers)
                {
                    <option value="@customer.CustomerId">@customer.CustomerName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => invoice.CustomerId)" />

            <h4>Select Products</h4>
            <div class="form-group">
                <label for="product">Select Product</label>
                <InputSelect id="product" class="form-control" @bind-Value="selectedProductId" @bind-Value:after="OnProductChange">
                    <option value="">--- Select Product ---</option>
                    @foreach (var product in products)
                    {
                        <option value="@product.ProductId">@product.ProductName</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label for="quantity">Quantity</label>
                <InputNumber id="quantity" class="form-control" @bind-Value="quantity" />
            </div>

            @if (warehouseProducts != null && warehouseProducts.Any())
            {
                <div class="form-group">
                    <label for="warehouse">Available Warehouse</label>
                    <InputSelect id="warehouse" class="form-control" @bind-Value="selectedWarehouseId">
                        <option value="">--- Select Warehouse ---</option>
                        @foreach (var warehouseProduct in warehouseProducts)
                        {
                            <option value="@warehouseProduct.WarehouseId">@warehouseProduct.WarehouseName</option>
                        }
                    </InputSelect>
                </div>
            }

            <button type="button" class="btn btn-info" style="margin:10px 0" @onclick="AddProduct">Add Product</button>

            <h4>Selected Products</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Warehouse</th>
                        <th>Quantity</th>
                        <th>Unit Price</th>
                        <th>Total</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detail in selectedProducts)
                    {
                        <tr>
                            <td>@detail.ProductName</td>
                            <td>@detail.WarehouseName</td>
                            <td>@detail.Quantity</td>
                            <td>@detail.UnitPrice</td>
                            <td>@(detail.Quantity * detail.UnitPrice)</td>
                            <td><button class="btn btn-danger" @onclick="() => RemoveProduct(detail)">Remove</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="form-group">
            <label>Customer: </label>
            <span>@selectedCustomerName</span>
        </div>
        <div class="form-group">
            <label>Total Amount: </label>
            <span>@invoice.TotalAmount</span>
        </div>

        <button type="submit" class="btn btn-primary" disabled="@(!selectedProducts.Any())">Create Invoice</button>
    </EditForm>
}
@code {
    private IEnumerable<CustomerUiModel>? customers;
    private IEnumerable<ProductUiModel>? products;
    private IEnumerable<WarehouseProductUiModel>? warehouseProducts;
    private List<InvoiceDetailUiModel> selectedProducts = new List<InvoiceDetailUiModel>();
    private SalesInvoiceInputUiModel invoice = new SalesInvoiceInputUiModel();
    private int selectedProductId;
    private int selectedWarehouseId;
    private int quantity = 1;
    private string? selectedCustomerName = "";
    private string? errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var customerRequest = await HttpClient.GetAsync("api/customers");
        var productRequest = await HttpClient.GetAsync("api/products");

        if (customerRequest.IsSuccessStatusCode)
        {
            customers = await customerRequest.Content.ReadFromJsonAsync<IEnumerable<CustomerUiModel>>();
        }

        if (productRequest.IsSuccessStatusCode)
        {
            products = await productRequest.Content.ReadFromJsonAsync<IEnumerable<ProductUiModel>>();
        }
    }

    private void AddProduct()
    {
        if (selectedProductId == 0 || quantity <= 0) return;

        if (string.IsNullOrEmpty(selectedCustomerName))
        {
            var selectedCustomer = customers?.FirstOrDefault(c => c.CustomerId == invoice.CustomerId);
            selectedCustomerName = selectedCustomer?.CustomerName ?? "";
        }

        var product = products?.FirstOrDefault(p => p.ProductId == selectedProductId);
        var warehouseProduct = warehouseProducts?.FirstOrDefault(w => w.WarehouseId == selectedWarehouseId);
        if (product != null && warehouseProduct != null)
        {
            var existingDetail = selectedProducts.FirstOrDefault(d => d.ProductId == product.ProductId && d.WarehouseId == warehouseProduct.WarehouseId);
            if (existingDetail != null)
            {
                existingDetail.Quantity += quantity;
                existingDetail.Total = existingDetail.Quantity * existingDetail.UnitPrice;
            }
            else
            {
                selectedProducts.Add(new InvoiceDetailUiModel
                    {
                        ProductId = product.ProductId,
                        ProductName = product.ProductName,
                        WarehouseId = warehouseProduct.WarehouseId,
                        WarehouseName = warehouseProduct.WarehouseName,
                        Quantity = quantity,
                        UnitPrice = product.UnitPrice,
                        Total = quantity * product.UnitPrice
                    });
            }
        }

        invoice.TotalAmount = selectedProducts.Sum(d => d.Quantity * d.UnitPrice);

        selectedProductId = 0;
        selectedWarehouseId = 0;
        quantity = 1;
    }

    private void RemoveProduct(InvoiceDetailUiModel detail)
    {
        selectedProducts.Remove(detail);
        invoice.TotalAmount = selectedProducts.Sum(d => d.Quantity * d.UnitPrice);
    }

    private async Task SubmitInvoice()
    {
        invoice.InvoiceDetails = selectedProducts ?? new List<InvoiceDetailUiModel>();
        invoice.TotalAmount = invoice.InvoiceDetails.Sum(d => d.Quantity * d.UnitPrice);
        var response = await HttpClient.PostAsJsonAsync("api/salesinvoices", invoice);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/invoice");
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var error = await response.Content.ReadAsStringAsync();
            using (JsonDocument doc = JsonDocument.Parse(error))
            {
                JsonElement root = doc.RootElement;
                string errorMessage = root.GetProperty("message").GetString();
                this.errorMessage = errorMessage;
            }
        }
    }

    private async Task OnProductChange()
    {
        var warehouseRequest = await HttpClient.GetAsync($"api/products/{selectedProductId}/warehouses");
        if (warehouseRequest.IsSuccessStatusCode)
        {
            warehouseProducts = await warehouseRequest.Content.ReadFromJsonAsync<IEnumerable<WarehouseProductUiModel>>();
        }
    }
}

