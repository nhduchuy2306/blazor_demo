@page "/invoice"

@using ClientApp.Pages.Popup
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Invoice</h3>


@if (getDataError || invoices is null)
{
    <p>Unable to get data.</p>
}
else
{
    <a class="btn btn-info" href="/invoice/create">Create Customer</a>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Invoice Id</th>
                <th scope="col">Invoice Number</th>
                <th scope="col">Invoice Date</th>
                <th scope="col">Customer Id</th>
                <th scope="col">Total Amount</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var invoice in invoices)
            {
                <tr>
                    <td>@invoice.InvoiceId</td>
                    <td>@invoice.InvoiceNumber</td>
                    <td>@invoice.InvoiceDate</td>
                    <td>@invoice.CustomerId</td>
                    <td>@invoice.TotalAmount</td>
                    <td>
                        <a class="btn btn-light" href="/invoice/detail/@invoice.CustomerId">Detail</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<SalesInvoiceUiModel>? invoices;
    private bool getDataError;
    private bool shouldRender;
    private int currentDeleteSaleInvoiceId;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = await HttpClient.GetAsync("api/salesinvoices");

        if (request.IsSuccessStatusCode)
        {
            invoices = await request.Content.ReadFromJsonAsync<IEnumerable<SalesInvoiceUiModel>>();
        }
        else
        {
            getDataError = true;
        }

        shouldRender = true;
    }
}
